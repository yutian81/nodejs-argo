name: Build and Release Appwrite

on:
  push:
    branches: [appwrite]
    paths:
      - 'appwrite-*'
      - 'appwrite-*/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code (Appwrite 分支)
        uses: actions/checkout@v4
        with:
          ref: appwrite

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Validate there are appwrite-* directories
        run: |
          set -euo pipefail
          shopt -s nullglob
          matches=(appwrite-*/)
          if [ ${#matches[@]} -eq 0 ]; then
            echo "❌ 未发现任何以 appwrite- 开头的顶层目录"
            exit 1
          fi
          echo "✅ 找到以下目录："
          for d in "${matches[@]}"; do
            echo " - ${d%/}"
          done

      - name: Display directory info
        run: |
          set -euo pipefail
          echo "📂 根目录列表:"
          ls -la
          echo ""
          shopt -s nullglob
          for d in appwrite-*/; do
            dir="${d%/}"
            echo "📁 ${dir} 内容:"
            ls -la "$dir" || true
            echo ""
          done

      - name: Create deployment archives
        id: package
        run: |
          set -euo pipefail
          TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
          echo "当前UTC时间戳: $TIMESTAMP"
          mkdir -p dist

          for dir in $(find . -maxdepth 1 -type d -name "appwrite-*"); do
            BASENAME=$(basename "$dir")
            ARCHIVE_NAME="${BASENAME}.${TIMESTAMP}.tar.gz"
            echo "📦 正在打包 $dir → dist/${ARCHIVE_NAME}"
            tar -czf "dist/${ARCHIVE_NAME}" -C "$dir" .
            echo "✅ 已创建压缩包: dist/${ARCHIVE_NAME}"
          done

          if ! ls dist/*.tar.gz >/dev/null 2>&1; then
            echo "❌ 未生成任何压缩包（可能没有匹配目录）"
            exit 1
          fi

          echo "archives=$(ls dist/*.tar.gz | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      - name: Verify archives
        run: |
          set -euo pipefail
          echo "📦 dist/ 目录内容："
          ls -lh dist/ || true
          for f in dist/*.tar.gz; do
            echo "🔍 查看 $f 内容:"
            tar -tzf "$f" | head -n 20
            echo ""
          done

      - name: Generate release notes
        id: release_notes
        run: |
          set -euo pipefail
          LATEST_COMMIT=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=format:"%Y-%m-%d %H:%M")
          SHORT_SHA=$(git rev-parse --short HEAD)

          {
            echo "## 🚀 Appwrite Functions 部署包"
            echo ""
            echo "本次构建自动打包了仓库中所有以 **appwrite-** 开头的目录。"
            echo ""
            echo "**最近提交：**"
            echo "- 提交信息: ${LATEST_COMMIT}"
            echo "- 提交作者: ${COMMIT_AUTHOR}"
            echo "- 提交时间: ${COMMIT_DATE}"
            echo "- 提交版本: ${SHORT_SHA}"
            echo ""
            echo "📦 打包时间 (UTC): $(date -u +"%Y-%m-%d %H:%M:%S")"
            echo ""
            echo "**上传的压缩包：**"
            for f in dist/*.tar.gz; do
              echo "- ${f}"
            done
          } > release_notes.md

      - name: Delete old release (if exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "🧹 检查旧的 release 是否存在..."
          if gh release view "appwrite-functions-latest" >/dev/null 2>&1; then
            echo "⚠️ 发现旧的 release，正在删除..."
            gh release delete "appwrite-functions-latest" --yes
            echo "✅ 已删除旧的 release。"
          else
            echo "ℹ️ 未找到旧的 release。"
          fi

      - name: Create or Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "appwrite-functions-latest"
          name: "Appwrite Functions"
          body_path: release_notes.md
          files: dist/*.tar.gz
          draft: false
          prerelease: false
          make_latest: true
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          echo "🎉 自动构建与发布完成！"
          echo "📦 已生成的包："
          ls -lh dist/ || true
          echo "🏷️ 发布名称: Appwrite Functions"
          echo "🔗 发布地址: https://github.com/${{ github.repository }}/releases/tag/appwrite-functions-latest"
